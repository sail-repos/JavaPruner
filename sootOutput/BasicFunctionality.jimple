public class com.sun.tracing.BasicFunctionality extends java.lang.Object
{
    public static com.sun.tracing.ProviderFactory factory;
    public static com.sun.tracing.BasicProvider bp;
    public static long TRAPCOUNT;

    static void <clinit>()
    {
        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = 0L;

        return;
    }

    public void <init>()
    {
        com.sun.tracing.BasicFunctionality r0;

        r0 := @this: com.sun.tracing.BasicFunctionality;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void fail(java.lang.String) throws java.lang.Exception
    {
        java.lang.Exception $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        com.sun.tracing.ProviderFactory $r0, $r1, $r11;
        java.lang.OutOfMemoryError $r2, $r3, $r6, $r7, $r8, $r9;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.Long $r4;
        com.sun.tracing.BasicProvider $r5, $r13;
        java.lang.String[] r10;
        int i6;
        com.sun.tracing.Provider $r12;
        java.security.cert.CertificateExpiredException[][][] r14;

        r10 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <com.sun.tracing.ProviderFactory: com.sun.tracing.ProviderFactory getDefaultFactory()>();

        <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory> = $r0;

        $r1 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory>;

        if $r1 == null goto label14;

     label01:
        if 0 == 1 goto label02;

        $r2 = new java.lang.OutOfMemoryError;

        specialinvoke $r2.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r2;

     label02:
        goto label13;

     label03:
        $r8 := @caughtexception;

     label04:
        staticinvoke <java.lang.System: void gc()>();

        if 0 == 1 goto label05;

        $r9 = new java.lang.OutOfMemoryError;

        specialinvoke $r9.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r9;

     label05:
        goto label12;

     label06:
        $r7 := @caughtexception;

        i6 = 17;

     label07:
        if i6 >= 81 goto label12;

        if i6 < 3 goto label08;

     label08:
        if 0 == 1 goto label09;

        $r6 = new java.lang.OutOfMemoryError;

        specialinvoke $r6.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("X");

        throw $r6;

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        $l0 = <com.sun.tracing.BasicFunctionality: long TRAPCOUNT>;

        staticinvoke <java.lang.System: void gc()>();

        $l1 = $l0 + 1L;

        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = $l1;

     label11:
        $l2 = <com.sun.tracing.BasicFunctionality: long TRAPCOUNT>;

        $l3 = $l2 + 1L;

        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = $l3;

        i6 = i6 + 3;

        goto label07;

     label12:
        $l4 = <com.sun.tracing.BasicFunctionality: long TRAPCOUNT>;

        $r5 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(-2L);

        interfaceinvoke $r5.<com.sun.tracing.BasicProvider: void probeWithArgs(int,float,java.lang.String,java.lang.Long)>(-2, 2.0F, "1 ^", $r4);

        $l5 = $l4 + 1L;

        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = $l5;

     label13:
        $r11 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory>;

        $r12 = virtualinvoke $r11.<com.sun.tracing.ProviderFactory: com.sun.tracing.Provider createProvider(java.lang.Class)>(class "Lcom/sun/tracing/BasicProvider;");

        $r13 = (com.sun.tracing.BasicProvider) $r12;

        staticinvoke <java.lang.System: void gc()>();

        <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp> = $r13;

     label14:
        staticinvoke <com.sun.tracing.BasicFunctionality: void testProviderFactory()>();

        staticinvoke <com.sun.tracing.BasicFunctionality: void testProbe()>();

        r14 = newmultiarray (java.security.cert.CertificateExpiredException)[8][64][64];

        staticinvoke <com.sun.tracing.BasicFunctionality: void testProvider()>();

        return;

        catch java.lang.OutOfMemoryError from label01 to label02 with label03;
        catch java.lang.OutOfMemoryError from label04 to label05 with label06;
        catch java.lang.OutOfMemoryError from label08 to label09 with label10;
    }

    static void testProbe() throws java.lang.Exception
    {
        java.lang.Class[] $r0, r21;
        java.lang.Class $r1, $r6, $r7, $r8;
        com.sun.tracing.BasicProvider $r2, $r9;
        java.lang.Object[] $r3, $r4, $r11, r24;
        java.lang.Integer $r5;
        java.lang.reflect.Method $r10, r18;
        java.lang.Float $r12, $r13;
        java.lang.Long $r14;
        java.lang.IllegalArgumentException $r15, $r16, $r17, r20, r23, r25;
        com.sun.tracing.Probe r19, r22;

        $r1 = class "Lcom/sun/tracing/BasicProvider;";

        $r0 = newarray (java.lang.Class)[0];

        r18 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("plainProbe", $r0);

        $r2 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        r19 = interfaceinvoke $r2.<com.sun.tracing.BasicProvider: com.sun.tracing.Probe getProbe(java.lang.reflect.Method)>(r18);

        interfaceinvoke r19.<com.sun.tracing.Probe: boolean isEnabled()>();

        $r3 = newarray (java.lang.Object)[0];

        interfaceinvoke r19.<com.sun.tracing.Probe: void trigger(java.lang.Object[])>($r3);

     label01:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4[0] = $r5;

        interfaceinvoke r19.<com.sun.tracing.Probe: void trigger(java.lang.Object[])>($r4);

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Probe.trigger: too many arguments not caught");

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        r20 = $r17;

     label04:
        $r9 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r8 = class "Lcom/sun/tracing/BasicProvider;";

        r21 = newarray (java.lang.Class)[4];

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        r21[0] = $r6;

        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        r21[1] = $r7;

        r21[2] = class "Ljava/lang/String;";

        r21[3] = class "Ljava/lang/Long;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("probeWithArgs", r21);

        r22 = interfaceinvoke $r9.<com.sun.tracing.BasicProvider: com.sun.tracing.Probe getProbe(java.lang.reflect.Method)>($r10);

     label05:
        $r11 = newarray (java.lang.Object)[0];

        interfaceinvoke r22.<com.sun.tracing.Probe: void trigger(java.lang.Object[])>($r11);

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Probe.trigger: too few arguments not caught");

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

        r23 = $r16;

     label08:
        r24 = newarray (java.lang.Object)[4];

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.14F);

        r24[0] = $r12;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.14F);

        r24[1] = $r13;

        r24[2] = "";

        $r14 = new java.lang.Long;

        specialinvoke $r14.<java.lang.Long: void <init>(long)>(0L);

        r24[3] = $r14;

        interfaceinvoke r22.<com.sun.tracing.Probe: void trigger(java.lang.Object[])>(r24);

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Probe.trigger: wrong type primitive arguments not caught");

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

        r25 = $r15;

     label11:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }

    public static void testProvider() throws java.lang.Exception
    {
        com.sun.tracing.BasicProvider $r0, $r2, $r3, $r4, $r5, $r6, $r10, $r15, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r27;
        java.lang.Long $r1, $r19;
        java.lang.Class[] $r7, $r12;
        java.lang.Class $r8, $r13;
        java.lang.reflect.Method r9, r14;
        com.sun.tracing.Probe $r11, $r16, $r26;

        $r0 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r0.<com.sun.tracing.BasicProvider: void plainProbe()>();

        $r2 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(2L);

        interfaceinvoke $r2.<com.sun.tracing.BasicProvider: void probeWithArgs(int,float,java.lang.String,java.lang.Long)>(42, 3.14F, "spam", $r1);

        $r3 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r3.<com.sun.tracing.BasicProvider: void probeWithArgs(int,float,java.lang.String,java.lang.Long)>(42, 3.14F, null, null);

        $r4 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r4.<com.sun.tracing.BasicProvider: void probeWithName()>();

        $r5 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r5.<com.sun.tracing.BasicProvider: void overloadedProbe()>();

        $r6 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r6.<com.sun.tracing.BasicProvider: void overloadedProbe(int)>(42);

        $r8 = class "Lcom/sun/tracing/BasicProvider;";

        $r7 = newarray (java.lang.Class)[0];

        r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("plainProbe", $r7);

        $r10 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r11 = interfaceinvoke $r10.<com.sun.tracing.BasicProvider: com.sun.tracing.Probe getProbe(java.lang.reflect.Method)>(r9);

        if $r11 != null goto label1;

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Provider.getProbe: Did not return probe");

     label1:
        $r13 = class "Lcom/sun/tracing/BasicFunctionality;";

        $r12 = newarray (java.lang.Class)[0];

        r14 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("testProvider", $r12);

        $r15 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r16 = interfaceinvoke $r15.<com.sun.tracing.BasicProvider: com.sun.tracing.Probe getProbe(java.lang.reflect.Method)>(r14);

        if $r16 == null goto label2;

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Provider.getProbe: Got probe with invalid spec");

     label2:
        $r17 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r17.<com.sun.tracing.BasicProvider: void dispose()>();

        $r18 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r18.<com.sun.tracing.BasicProvider: void plainProbe()>();

        $r20 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r19 = new java.lang.Long;

        specialinvoke $r19.<java.lang.Long: void <init>(long)>(2L);

        interfaceinvoke $r20.<com.sun.tracing.BasicProvider: void probeWithArgs(int,float,java.lang.String,java.lang.Long)>(42, 3.14F, "spam", $r19);

        $r21 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r21.<com.sun.tracing.BasicProvider: void probeWithArgs(int,float,java.lang.String,java.lang.Long)>(42, 3.14F, null, null);

        $r22 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r22.<com.sun.tracing.BasicProvider: void probeWithName()>();

        $r23 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r23.<com.sun.tracing.BasicProvider: void overloadedProbe()>();

        $r24 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r24.<com.sun.tracing.BasicProvider: void overloadedProbe(int)>(42);

        $r25 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        $r26 = interfaceinvoke $r25.<com.sun.tracing.BasicProvider: com.sun.tracing.Probe getProbe(java.lang.reflect.Method)>(r9);

        if $r26 == null goto label3;

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Provider.getProbe: Should return null after dispose()");

     label3:
        $r27 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        interfaceinvoke $r27.<com.sun.tracing.BasicProvider: void dispose()>();

        return;
    }

    static void testProviderFactory() throws java.lang.Exception
    {
        com.sun.tracing.ProviderFactory $r0, $r1, $r3;
        java.lang.NullPointerException $r5, $r6, r7, $r8, $r9, $r11, r12, r15;
        long $l0, $l1, $l2, $l3;
        java.lang.IllegalArgumentException $r10, r16;
        int i4, i5, i6;
        com.sun.tracing.BasicProvider $r13;
        java.util.zip.ZipException[][][] r14;

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void gc()>();

        $r0 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory>;

        if $r0 != null goto label14;

     label01:
        if 1 == 0 goto label02;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label02:
        goto label13;

     label03:
        $r9 := @caughtexception;

        r12 = $r9;

        staticinvoke <java.lang.System: void gc()>();

        i4 = 27;

     label04:
        if i4 >= 90 goto label13;

        if i4 == -3 goto label06;

        i5 = 23;

     label05:
        if i5 >= 74 goto label06;

        i5 = i5 + 2;

        goto label05;

     label06:
        i6 = 54;

     label07:
        if i6 >= 96 goto label12;

     label08:
        if 1 == 0 goto label09;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("");

        throw $r8;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        r7 = $r6;

        $l0 = <com.sun.tracing.BasicFunctionality: long TRAPCOUNT>;

        $l1 = $l0 + 1L;

        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = $l1;

     label11:
        $l2 = <com.sun.tracing.BasicFunctionality: long TRAPCOUNT>;

        $l3 = $l2 + 1L;

        <com.sun.tracing.BasicFunctionality: long TRAPCOUNT> = $l3;

        i4 = i4 + 2;

        i6 = i6 + 1;

        goto label07;

     label12:
        goto label04;

     label13:
        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("ProviderFactory.getDefaultFactory: Did not create factory");

     label14:
        $r13 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.BasicProvider bp>;

        if $r13 != null goto label15;

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("ProviderFactory.createProvider: Did not create provider");

     label15:
        $r1 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory>;

        virtualinvoke $r1.<com.sun.tracing.ProviderFactory: com.sun.tracing.Provider createProvider(java.lang.Class)>(null);

        r14 = newmultiarray (java.util.zip.ZipException)[16][64][16];

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("ProviderFactory.createProvider: Did not throw NPE for null");

     label16:
        goto label18;

     label17:
        $r11 := @caughtexception;

        r15 = $r11;

     label18:
        $r3 = <com.sun.tracing.BasicFunctionality: com.sun.tracing.ProviderFactory factory>;

        virtualinvoke $r3.<com.sun.tracing.ProviderFactory: com.sun.tracing.Provider createProvider(java.lang.Class)>(class "Lcom/sun/tracing/InvalidProvider;");

        staticinvoke <com.sun.tracing.BasicFunctionality: void fail(java.lang.String)>("Factory.createProvider: Should error with non-void probes");

     label19:
        goto label21;

     label20:
        $r10 := @caughtexception;

        r16 = $r10;

     label21:
        return;

        catch java.lang.NullPointerException from label15 to label16 with label17;
        catch java.lang.IllegalArgumentException from label18 to label19 with label20;
        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label08 to label09 with label10;
    }
}
