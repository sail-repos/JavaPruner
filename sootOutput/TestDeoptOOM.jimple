public class compiler.uncommontrap.TestDeoptOOM extends java.lang.Object
{
    long f1;
    long f2;
    long f3;
    long f4;
    long f5;
    static compiler.uncommontrap.TestDeoptOOM$LinkedList ll;

    public void <init>()
    {
        compiler.uncommontrap.TestDeoptOOM r0;

        r0 := @this: compiler.uncommontrap.TestDeoptOOM;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void consume_all_memory()
    {
        compiler.uncommontrap.TestDeoptOOM$LinkedList $r0, $r1;
        java.lang.OutOfMemoryError $r2;
        int i0;

        i0 = 134217728;

        goto label3;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM$LinkedList;

        $r1 = <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM$LinkedList ll>;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM$LinkedList: void <init>(compiler.uncommontrap.TestDeoptOOM$LinkedList,int)>($r1, i0);

        <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM$LinkedList ll> = $r0;

        goto label1;

     label2:
        $r2 := @caughtexception;

        i0 = i0 / 2;

     label3:
        if i0 > 0 goto label1;

        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label2;
    }

    static void free_memory()
    {
        <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM$LinkedList ll> = null;

        return;
    }

    static compiler.uncommontrap.TestDeoptOOM m1(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if z0 == 0 goto label4;

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m1");

     label4:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m2(boolean)
    {
        java.lang.OutOfMemoryError $r0;
        int $i0;
        boolean[] $r1, $r3, r7, r9;
        int[] $r2, r8;
        boolean z0;
        compiler.uncommontrap.TestDeoptOOM r4;
        java.io.PrintStream r6;

        z0 := @parameter0: boolean;

     label1:
        r4 = staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m2_1(boolean)>(z0);

     label2:
        return r4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        r6 = <java.lang.System: java.io.PrintStream out>;

        r7 = newarray (boolean)[100];

        r8 = newarray (int)[-1];

        r9 = newarray (boolean)[3];

        $i0 = <compiler.loopopts.superword.TestBestAlign_mutator: int limit>;

        if -2 < $i0 goto label4;

        goto label5;

     label4:
        $r1 = <compiler.loopopts.superword.TestBestAlign_mutator: boolean[] boolArray>;

        $r1[1] = 1;

        $r2 = <compiler.loopopts.superword.TestBestAlign_mutator: int[] intArray>;

        $r2[-2] = -1;

        $r3 = <compiler.loopopts.superword.TestBestAlign_mutator: boolean[] boolArray>;

        $r3[2] = 1;

     label5:
        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m2");

        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m2_1(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if z0 == 0 goto label4;

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m2_1");

     label4:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m3(boolean)
    {
        java.lang.OutOfMemoryError $r0;
        java.io.PrintStream $r1;
        com.sun.jdi.connect.Connector$IntegerArgument $r2;
        java.lang.NullPointerException $r3;
        boolean z0;
        compiler.uncommontrap.TestDeoptOOM r4;

        z0 := @parameter0: boolean;

     label1:
        r4 = staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m3_1(boolean)>(z0);

     label2:
        return r4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m3");

        $r2 = <nsk.jdi.IntegerArgument.setValue.setvalue001_mutator: com.sun.jdi.connect.Connector$IntegerArgument intArgument>;

        if $r2 == null goto label4;

        goto label5;

     label4:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: $stack8 = interfaceinvoke l1#4.<java.util.Iterator: java.lang.Object next()>()");

        throw $r3;

     label5:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m3_1(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        boolean $z0, z1;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;

        z1 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        $z0 = staticinvoke <compiler.uncommontrap.TestDeoptOOM: boolean m3_2(boolean)>(z1);

        if $z0 == 0 goto label4;

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m3_1");

     label4:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static boolean m3_2(boolean)
    {
        int[] r0;
        int $i0, i1, i4, i5;
        compiler.uncommontrap.TestDeoptOOM $r1;
        java.lang.RuntimeException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13;
        java.lang.String $r7, $r14;
        java.lang.Throwable $r8, $r15;
        java.lang.OutOfMemoryError $r16;
        java.io.PrintStream $r17;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 = newarray (int)[-1];

        $i0 = lengthof r0;

        if $i0 > 0 goto label3;

        i4 = r0[5];

        i1 = staticinvoke <compiler.arraycopy.TestACSameSrcDst_mutator: int test1(int[],int[])>(r0, r0);

        if i1 == i4 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("bad result: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        $r15 = (java.lang.Throwable) $r9;

        throw $r15;

     label1:
        staticinvoke <compiler.arraycopy.TestACSameSrcDst_mutator: int test2(int[])>(r0);

        i5 = staticinvoke <compiler.arraycopy.TestACSameSrcDst_mutator: int test3()>();

        if i5 == 66 goto label2;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("bad result: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(66);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r2;

        throw $r8;

     label2:
        staticinvoke <compiler.arraycopy.TestACSameSrcDst_mutator: int test4()>();

        goto label4;

     label3:
        r0[0] = 0;

     label4:
        $r1 = staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m3_3(boolean)>(z0);

        if $r1 == null goto label5;

        return 1;

     label5:
        return 0;

     label6:
        $r16 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m3_2");

        return 0;

        catch java.lang.OutOfMemoryError from label4 to label5 with label6;
    }

    static compiler.uncommontrap.TestDeoptOOM m3_3(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if z0 == 0 goto label4;

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m3_3");

     label4:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m4(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if z0 == 0 goto label4;

        $r0.<compiler.uncommontrap.TestDeoptOOM: long f1> = 1L;

        $r0.<compiler.uncommontrap.TestDeoptOOM: long f2> = 2L;

        $r0.<compiler.uncommontrap.TestDeoptOOM: long f3> = 3L;

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m4");

     label4:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m5(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r3;
        java.io.PrintStream $r4;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        entermonitor $r0;

        if z0 == 0 goto label3;

        exitmonitor $r0;

     label2:
        return $r0;

     label3:
        exitmonitor $r0;

        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m5");

     label5:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label4;
        catch java.lang.OutOfMemoryError from label3 to label4 with label4;
    }

    static compiler.uncommontrap.TestDeoptOOM m6(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM $r0, r6;
        java.lang.String[] r1;
        java.io.PrintStream $r2, $r3, $r5;
        java.lang.OutOfMemoryError $r4;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        r1 = newarray (java.lang.String)[100];

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("before");

        staticinvoke <vmTestbase.vm.compiler.CodeCacheInfoOnCompilation.PrintOnCall_mutator: void printOnCall()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("after");

        r6 = virtualinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m6_1(boolean)>(z0);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m6");

        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    synchronized compiler.uncommontrap.TestDeoptOOM m6_1(boolean)
    {
        boolean z0;
        compiler.uncommontrap.TestDeoptOOM r0;

        r0 := @this: compiler.uncommontrap.TestDeoptOOM;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    static compiler.uncommontrap.TestDeoptOOM m7(boolean, java.lang.Object)
    {
        java.lang.OutOfMemoryError $r0;
        double $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        double[] $r1, r6;
        java.io.PrintStream $r2;
        boolean z0;
        java.lang.Object r3;
        compiler.uncommontrap.TestDeoptOOM r4;
        vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator r7;

        z0 := @parameter0: boolean;

        r3 := @parameter1: java.lang.Object;

     label1:
        r4 = staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m7_1(boolean,java.lang.Object)>(z0, r3);

     label2:
        return r4;

     label3:
        $r0 := @caughtexception;

        r6 = newarray (double)[3];

        r7 = new vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator;

        specialinvoke r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: void <init>()>();

        $r1 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double[] a>;

        $d2 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i1>;

        $d1 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i2>;

        $d4 = $d2 / $d1;

        $d3 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i3>;

        $d6 = $d4 / $d3;

        $d5 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i4>;

        $d8 = $d6 / $d5;

        $d7 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i5>;

        $d10 = $d8 / $d7;

        $d9 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i6>;

        $d12 = $d10 / $d9;

        $d11 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i7>;

        $d14 = $d12 / $d11;

        $d13 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i8>;

        $d16 = $d14 / $d13;

        $d15 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i9>;

        $d18 = $d16 / $d15;

        $d17 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i10>;

        $d20 = $d18 / $d17;

        $d19 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i11>;

        $d22 = $d20 / $d19;

        $d21 = r7.<vm.compiler.jbe.subcommon.subcommon05.subcommon05_mutator: double i12>;

        $d23 = $d22 / $d21;

        $r1[1] = $d23;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m7");

        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    static compiler.uncommontrap.TestDeoptOOM m7_1(boolean, java.lang.Object)
    {
        compiler.uncommontrap.TestDeoptOOM $r1;
        java.lang.OutOfMemoryError $r2;
        java.io.PrintStream $r3;
        java.lang.Throwable $r4;
        boolean z0;
        java.lang.Object r5;

        z0 := @parameter0: boolean;

        r5 := @parameter1: java.lang.Object;

     label1:
        entermonitor r5;

     label2:
        $r1 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r1.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if z0 == 0 goto label4;

        exitmonitor r5;

     label3:
        return $r1;

     label4:
        exitmonitor r5;

     label5:
        goto label9;

     label6:
        $r4 := @caughtexception;

        exitmonitor r5;

     label7:
        throw $r4;

     label8:
        $r2 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m7_1");

     label9:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.OutOfMemoryError from label1 to label3 with label8;
        catch java.lang.OutOfMemoryError from label4 to label8 with label8;
    }

    static compiler.uncommontrap.TestDeoptOOM$B m8(boolean)
    {
        compiler.uncommontrap.TestDeoptOOM$A $r0;
        compiler.uncommontrap.TestDeoptOOM$B $r2;
        int $i0, $i1, i6;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.io.PrintStream $r4, $r9;
        java.lang.String $r7;
        java.lang.OutOfMemoryError $r8;
        boolean z0;

        z0 := @parameter0: boolean;

     label1:
        $r0 = new compiler.uncommontrap.TestDeoptOOM$A;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM$A: void <init>()>();

        $r2 = new compiler.uncommontrap.TestDeoptOOM$B;

        specialinvoke $r2.<compiler.uncommontrap.TestDeoptOOM$B: void <init>()>();

        goto label2;

     label2:
        $i0 = 1 & 1;

        $i1 = $i0 << 1;

        <compiler.c2.Test7048332_mutator: int last> = $i1;

        i6 = staticinvoke <compiler.c2.Test7048332_mutator: int test(int,int,int,int,int,int)>(1, 2, 3, 4, 5, 6);

        if i6 == 1 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("FAILED: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != 1");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

        staticinvoke <java.lang.System: void exit(int)>(97);

     label3:
        $r2.<compiler.uncommontrap.TestDeoptOOM$B: compiler.uncommontrap.TestDeoptOOM$A a> = $r0;

        if z0 == 0 goto label6;

     label4:
        return $r2;

     label5:
        $r8 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m8");

     label6:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label4 with label5;
    }

    static compiler.uncommontrap.TestDeoptOOM m9()
    {
        compiler.uncommontrap.TestDeoptOOM $r0;
        java.lang.OutOfMemoryError $r1;
        java.io.PrintStream $r2;
        int i0;

     label1:
        i0 = 0;

        goto label5;

     label2:
        $r0 = new compiler.uncommontrap.TestDeoptOOM;

        specialinvoke $r0.<compiler.uncommontrap.TestDeoptOOM: void <init>()>();

        if i0 <= 90000 goto label4;

     label3:
        return $r0;

     label4:
        i0 = i0 + 1;

     label5:
        if i0 < 100000 goto label2;

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in m1");

     label8:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label3 with label7;
        catch java.lang.OutOfMemoryError from label4 to label6 with label7;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Object $r12;
        compiler.uncommontrap.TestDeoptOOM$1 $r15;
        java.lang.OutOfMemoryError $r19, $r21, $r24, $r26, $r28, $r30, $r32, $r34, $r36;
        java.io.PrintStream $r20, $r22, $r25, $r27, $r29, $r31, $r33, $r35, r41;
        java.lang.InterruptedException $r23;
        java.lang.String r37, $r39;
        java.lang.StringBuilder $r38, r42;
        java.lang.String[] r40;
        int i0, i1, i2, i3, i4, i5, i6, i7;

        r40 := @parameter0: java.lang.String[];

        i0 = 0;

        goto label02;

     label01:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m1(boolean)>(0);

        i0 = i0 + 1;

     label02:
        if i0 < 20000 goto label01;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label03:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m1(boolean)>(1);

     label04:
        goto label06;

     label05:
        $r36 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        r41 = <java.lang.System: java.io.PrintStream out>;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("OOM caught in main ");

        r37 = virtualinvoke $r36.<java.lang.OutOfMemoryError: java.lang.String getMessage()>();

        $r38 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r41.<java.io.PrintStream: void println(java.lang.String)>($r39);

     label06:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        i1 = 0;

        goto label08;

     label07:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m2(boolean)>(0);

        i1 = i1 + 1;

     label08:
        if i1 < 20000 goto label07;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label09:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m2(boolean)>(1);

     label10:
        goto label12;

     label11:
        $r34 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r35 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label12:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        i2 = 0;

        goto label14;

     label13:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m3(boolean)>(0);

        i2 = i2 + 1;

     label14:
        if i2 < 20000 goto label13;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label15:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m3(boolean)>(1);

     label16:
        goto label18;

     label17:
        $r32 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r33 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label18:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        i3 = 0;

        goto label20;

     label19:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m4(boolean)>(0);

        i3 = i3 + 1;

     label20:
        if i3 < 20000 goto label19;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label21:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m4(boolean)>(1);

     label22:
        goto label24;

     label23:
        $r30 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r31 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label24:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        i4 = 0;

        goto label26;

     label25:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m5(boolean)>(0);

        i4 = i4 + 1;

     label26:
        if i4 < 20000 goto label25;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label27:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m5(boolean)>(1);

     label28:
        goto label30;

     label29:
        $r28 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label30:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        i5 = 0;

        goto label32;

     label31:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m6(boolean)>(0);

        i5 = i5 + 1;

     label32:
        if i5 < 20000 goto label31;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label33:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m6(boolean)>(1);

     label34:
        goto label36;

     label35:
        $r26 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label36:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        i6 = 0;

        goto label38;

     label37:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m7(boolean,java.lang.Object)>(0, $r12);

        i6 = i6 + 1;

     label38:
        if i6 < 20000 goto label37;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label39:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m7(boolean,java.lang.Object)>(1, $r12);

     label40:
        goto label42;

     label41:
        $r24 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label42:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r15 = new compiler.uncommontrap.TestDeoptOOM$1;

        specialinvoke $r15.<compiler.uncommontrap.TestDeoptOOM$1: void <init>(java.lang.Object)>($r12);

        virtualinvoke $r15.<java.lang.Thread: void start()>();

     label43:
        virtualinvoke $r15.<java.lang.Thread: void join()>();

     label44:
        goto label46;

     label45:
        $r23 := @caughtexception;

     label46:
        i7 = 0;

        goto label48;

     label47:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM$B m8(boolean)>(0);

        i7 = i7 + 1;

     label48:
        if i7 < 20000 goto label47;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void consume_all_memory()>();

     label49:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM$B m8(boolean)>(1);

     label50:
        goto label52;

     label51:
        $r21 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label52:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

     label53:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: compiler.uncommontrap.TestDeoptOOM m9()>();

     label54:
        goto label56;

     label55:
        $r19 := @caughtexception;

        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("OOM caught in main");

     label56:
        staticinvoke <compiler.uncommontrap.TestDeoptOOM: void free_memory()>();

        return;

        catch java.lang.OutOfMemoryError from label03 to label04 with label05;
        catch java.lang.OutOfMemoryError from label09 to label10 with label11;
        catch java.lang.OutOfMemoryError from label15 to label16 with label17;
        catch java.lang.OutOfMemoryError from label21 to label22 with label23;
        catch java.lang.OutOfMemoryError from label27 to label28 with label29;
        catch java.lang.OutOfMemoryError from label33 to label34 with label35;
        catch java.lang.OutOfMemoryError from label39 to label40 with label41;
        catch java.lang.InterruptedException from label43 to label44 with label45;
        catch java.lang.OutOfMemoryError from label49 to label50 with label51;
        catch java.lang.OutOfMemoryError from label53 to label54 with label55;
    }
}
